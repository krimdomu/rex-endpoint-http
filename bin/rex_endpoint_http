#!/usr/bin/env perl

#
# (c) Jan Gehring <jan.gehring@gmail.com>
# 
# vim: set ts=3 sw=3 tw=0:
# vim: set expandtab:
   


use Mojo::Base -strict;

use File::Basename 'dirname';
use File::Spec::Functions qw(catdir splitdir);

# Source directory has precedence
my @base = (splitdir(dirname(__FILE__)), '..');
my $lib = join('/', @base, 'lib');
-e catdir(@base, 't') ? unshift(@INC, $lib) : push(@INC, $lib);

# Start commands for application
require Mojolicious::Commands;
Mojolicious::Commands->start_app('Rex::Endpoint::HTTP');


=pod

=head1 NAME

Rex::Endpoint::HTTP - Execute Rex over HTTP

=head1 DESCRIPTION

This is a replacement for the default SSH endpoint of Rex.

=head1 DEPENDENCIES

=over 4

=item * Mojolicious

=item * Digest::SHA1

=back

=head1 CONFIGURATION

=head2 Configuration File

rex_endpoint_http search at multiple locations for the configuration file. In this file you can define a user database file and configure the build in webserver (hypnotoad from Mojolicious).

=over 4

=item * /etc/rex/httpd.conf

=item * /usr/local/etc/rex/httpd.conf

=item * ./httpd.conf

=back

The format of the file is a Perl Hash Reference. So you have to start and end the file with braces. 

 {
    key1 => "value1",
    key2 => "value2",
 };

=head2 Configure Hypnotoad

As a default hypnotoad listens on every device on port 8080. This is a thing you want to change on production servers. To configure hypnotoad you have to add a new section.

 hypnotoad => {
    listen => ['http://127.0.0.1:8080'],
 },

The full file may look like this:

 {
    hypnotoad => {
       listen => ['http://127.0.0.1:8080'],
    },
 };

=head2 User/Password Authentication

If you want to use basic user/password authentication you have to add the location of the user file into the configuration. The key is I<user_file>.

 user_file => "/path/to/your/user.db",

The fill file may look like this:

 {
    user_file => "/path/to/your/user.db",
       
    # configure hypnotoad
    hypnotoad => {
       listen => ['http://127.0.0.1:8080'],
    },
 };

You also have to create a user database for the authentication.

This file exists of 2 columns seperated by ":". 

 username:sha1crypted-password

You can create the sha1 strings with the following command.

 perl -MDigest::SHA1 -le 'print Digest::SHA1::sha1_hex("your-password")'


=head2 SSL Authentication

If you want to use SSL Authentication (with client/server certificates) you have to put a webserver (like Apache) in front of the HTTP Endpoint.

This is an example configuration of Apache:

 <VirtualHost _default_:443>
    ServerName your-server.your-domain.tld
    ServerAlias your-server
    
    SSLEngine on
    
    SSLCertificateFile    /etc/apache2/ssl/ssl.crt
    SSLCertificateKeyFile /etc/apache2/ssl/ssl.key
    SSLCACertificateFile  /etc/apache2/ssl/ca.crt
    
    SSLVerifyClient require
    SSLVerifyDepth  10
    SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
    
    RequestHeader set SSL_CLIENT_VERIFY  ""
    
    <Location />
       RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"
       
       ProxyPass http://localhost:8080/
       ProxyPassReverse http://localhost:8080/
   </Location>
   
 </VirtualHost>

For this to work you need to create your own Certificate Authority (CA). There is a Rex recipe that will help you. Just create a small Rex project.

 bash# rexify ca --use Rex::SSL::CA
 bash# cd ca
 bash ~/ca# cat >Rexfile<<EOF
 require Rex::SSL::CA;
 require Rex::SSL::CA::Server;
 EOF

Please don't use a servername for the I<cn> parameter here!

 bash# rex SSL:CA:create --password=pass [--country=cn --state=state --city=city --org=organization --unit=organizational-unit --cn=name-of-the-ca --email=email]


And to create a server/client certificate you can use the following task. Here you have to use the server name for the I<cn> parameter.

 bash# rex SSL:CA:Server:create --cn=name-of-the-server --password=password [--challenge-password=challenge-password --country=country --state=state --city=city --org=organization --unit=organizational-unit --email=email]

After that you can copy the cert file from ca/certs/$cn.crt and the keyfile from ca/private/$cn.key. The CA Cert file is located at ca/certs/ca.crt.

=head1 DEPLOYMENTS

You can deploy Rex::Endpoint::HTTP in different ways. We suggest to use Apache or nginx as a frontend server to the build in webserver and to offload SSL. So it is possible to authenticate also with an SSL client certificate or with other authentication schemas.

=head2 No Frontend Webserver

This is not the recommended installation but the simpelst one. Please use this only for testing purpose.

You can start the build-in webserver just by executing the following command:

 rex_endpoint_http daemon -l 'http://*:80'

After that you can set your Rexfile to connect via http and execute your commands as usual.

 # Rexfile
 set connection => "http";

=head2 Simple Apache installation

Just install Apache on your server and create a new SSL enabled virtual host.

Here is an example configuration.

 <VirtualHost _default_:443>
    ServerName d6http01.your-domain.com
    ServerAlias d6http01
      
    SSLEngine on
      
    SSLCertificateFile    /etc/ssl/certs/d6http01.crt
    SSLCertificateKeyFile /etc/ssl/private/d6http01.key
      
    ProxyPass / http://localhost:8080/
    ProxyPassReverse / http://localhost:8080/
 </VirtualHost>

Than you can just start apache and the Rex Endpoint.

 bash# /etc/init.d/apache2 start  (debian/ubuntu)
 bash# /etc/init.d/httpd start (redhat compatible)
    
 bash# rex_endpoint_http daemon -l 'http://127.0.0.1:8080'

=head1 USAGE

To use the HTTP/S endpoint in your rexfiles you just have to enable it.

To use HTTP Transport use the following line inside your Rexfile:

 set connection => "http";

To use HTTPS Transport use this one:

 set connection => "https";

If you want to use HTTPS/SSL Authentication use this:

 set connection => "https";
 set ca => "/path/to/ca-cert-file.crt";
 set cert => "/path/to/client-cert-file.crt";
 set key => "/path/to/client-key-file.key"; 


=head1 INIT

You can download an init script from I<https://github.com/krimdomu/rex-endpoint-http/tree/master/doc>.

=cut
